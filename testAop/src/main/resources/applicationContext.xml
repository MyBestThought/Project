<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="account" class="com.yht.example1.service.impl.AccountImpl"></bean>

    <!--Spring中基于xml的AOP配置
    1，把通知bean交给Spring来管理
    2，使用aop:config标签表明开始AOP的配置
    3，使用aop:aspect标签表明配置切面
        id属性：切面的唯一标识
        ref属性：指明通知bean的id
    4，在aop:aspect标签的内部使用对应标签来配置通知的类型
        aop:before：表明是前置通知
            method属性：指明通知的方法
            pointcut属性：指明切入点的表达式，即业务层哪些方法需要加强

       切入点表达式的写法：
            关键字：execution(表达式)
            表达式：
                访问修饰符 返回值 包名.包名.…….类名
                public void com.yht.Test.save()
                访问修饰符可以省略
                void com.yht.example1.service.impl.AccountImpl.saveAccount()
                返回值可以使用通配符，表示任意返回值
                * com.yht.example1.service.impl.AccountImpl.saveAccount()
                包名可以使用通配符，表示任意包，但是需要注意的是，有几个子级包，就需要写几个*
                * *.*.*.*.*.AccountImpl.saveAccount()
                包名可以使用..表示当前包以及其子包
                * *..AccountImpl.saveAccount()
                类名和方法名可以使用*来实现通配
                * *..*.*()
                参数列表：
                    可以直接使用数据类型
                        基本数据类型直接写名称  int
                        引用数据类型写包名.类名  java.lang.String
                可以使用通配符表示任意数据类型，但是必须有参数。可以使用..表示有无参数均可，有参数可以是任意数据类型
                全通配写法：
                * *..*.*(..)
    -->

    <bean id="logger" class="com.yht.example1.common.Logger"></bean>
    <aop:config>
        <aop:aspect id="loggerService" ref="logger">
            <aop:before method="printLog" pointcut="execution(* *.*.*.*.*.*.*())"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>